#!/usr/bin/env node

/**
 * Module dependencies.
 */

var cluster = require('cluster');
var cores 	= require('os').cpus().length;

if (cluster.isMaster) {
	var app 	= require('../index').server;
	var host 	= require('../config/server');
    var debug 	= require('debug')('app:api');
    var http 	= require('http');
		
    /**
     * Get port from environment and store in Express.
     */
    var port = normalizePort(process.env.PORT || host.port || '1337');
    app.set('port', port);
    
    /**
     * Create HTTP server.
     */
    var server = http.createServer(app);
    
    /**
     * Listen on provided port, on all network interfaces.
     */
    server.listen(port);
    server.on('error', onError);
    server.on('listening', onListening);
    
    /**
     * Normalize a port into a number, string, or false.
     */
    function normalizePort(val) {
        var port = parseInt(val, 10);
        
        if (isNaN(port)) {
            // named pipe
            return val;
        }
        
        if (port >= 0) {
            // port number
            return port;
        }
        
        return false;
    }
    
    /**
     * Event listener for HTTP server "error" event.
     */
    function onError(error) {
        if (error.syscall !== 'listen') {
        	throw error;
        }
        
        var bind = typeof port === 'string'
            ? 'Pipe ' + port
            : 'Port ' + port;
        
        // handle specific listen errors with friendly messages
        switch (error.code) {
            case 'EACCES':
            	console.error(bind + ' requires elevated privileges');
            	process.exit(1);
            	break;
            case 'EADDRINUSE':
            	console.error(bind + ' is already in use');
            	process.exit(1);
            	break;
            default:
            	throw error;
        }
    }
    
    /**
     * Event listener for HTTP server "listening" event.
     */
    function onListening() {
        var addr = server.address();
        var bind = typeof addr === 'string'
            ? 'pipe ' + addr
            : 'port ' + addr.port;
        debug('Listening on ' + bind);
    }
    
    //save one core for the website
    if(cores > 1) {
		cores--;    
    }
    
    for (var i = 0; i < cores; i++) {
    	cluster.fork();
  	}
} else {
	console.log('Worker Online');
	require('../worker');
}
